services:

  redis:
    image: redis:latest
    container_name: redis-local
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped

  postgresql-db:
    image: postgres:17-alpine
    user: ${DB_POSTGRES_USER}
    environment:
      POSTGRES_DB: social-network
      POSTGRES_PASSWORD: ${DB_POSTGRES_PASS}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "social-network", "-U", "${DB_POSTGRES_USER}" ]
      interval: 5s
      timeout: 3s
      retries: 50
    ports:
      - ${DB_POSTGRES_PORT}:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: unless-stopped

  users-service:
    image: users-service:0.0.1
    build:
      context: ./users-service
      dockerfile: Dockerfile
    ports:
      - 8081:8081
    depends_on:
      postgresql-db:
        condition: service_healthy
    volumes:
      - logs:/application/logs
    environment:
      - spring.profiles.active=postgres
      - DB_H2_USER=${DB_H2_USER}
      - DB_H2_PASS=${DB_H2_PASS}
      - DB_POSTGRES_HOST=postgresql-db
      - DB_POSTGRES_PORT=${DB_POSTGRES_PORT}
      - DB_POSTGRES_USER=${DB_POSTGRES_USER}
      - DB_POSTGRES_PASS=${DB_POSTGRES_PASS}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}

  gateway:
    image: gateway:0.0.1
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      postgresql-db:
        condition: service_healthy
      users-service:
        condition: service_started
    volumes:
      - logs:/application/logs
    environment:
      - spring.profiles.active=postgres
      - CARDS_ON_PAGE=${CARDS_ON_PAGE}
      - MAX_MESSAGES_IN_CHAT=${MAX_MESSAGES_IN_CHAT}
      - DB_H2_USER=${DB_H2_USER}
      - DB_H2_PASS=${DB_H2_PASS}
      - DB_POSTGRES_HOST=postgresql-db
      - DB_POSTGRES_PORT=${DB_POSTGRES_PORT}
      - DB_POSTGRES_USER=${DB_POSTGRES_USER}
      - DB_POSTGRES_PASS=${DB_POSTGRES_PASS}
      - USERS_SERVICE_HOST=users-service
      - USERS_SERVICE_PORT=8081

volumes:
  redis-data:
  db-data:
  logs: